# -*- coding: utf-8 -*-
"""Dashboard_Proyek_Akhir

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17LPgL5OZ591mKtCYmX-sMiAm4eV0a-Kq
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import streamlit as st

# Set style seaborn
sns.set(style='dark')

# Menyiapkan data dashboard
day_dashboard_df = pd.read_csv("day_dashboard.csv")

st.set_page_config(page_title="Lucky Bike Share: Bike-sharing Dashboard",
                   page_icon="bar_chart:",
                   layout="wide")

# Menyiapkan Monthly Users
def create_monthly_rent_df(df):
    monthly_rent_df = df.groupby(by='month').agg({
        'count': 'sum'
    })
    ordered_months = [
        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
    ]
    monthly_rent_df = monthly_rent_df.reindex(ordered_months, fill_value=0)
    return monthly_rent_df

# Menyiapkan Weekday Users
def create_weekday_users_df(df):
    weekday_users_df = df.groupby("weekday").agg({
        "casual": "sum",
        "registered": "sum",
        "count": "sum"
    })
    weekday_users_df = weekday_users_df.reset_index()
    weekday_users_df.rename(columns={
        "count": "total_users",
        "casual": "casual_users",
        "registered": "registered_users"
    }, inplace=True)

    weekday_users_df = pd.melt(weekday_users_df,
                                      id_vars=['weekday'],
                                      value_vars=['casual_users', 'registered_users'],
                                      var_name='type_of_users',
                                      value_name='count_users')

    weekday_users_df['weekday'] = pd.Categorical(weekday_users_df['weekday'],
                                             categories=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])

    weekday_users_df = weekday_users_df.sort_values('weekday')

    return weekday_users_df

# Menyiapkan Workingday rent
def create_workingday_users_df(df):
    workingday_users_df = df.groupby(by="workingday").agg({
        "casual": "sum",
        "registered": "sum",
        "count": "sum"
    }).reset_index()
    return workingday_users_df

# Menyiapkan Holiday rent
def create_holiday_users_df(df):
    holiday_users_df = df.groupby(by='holiday').agg({
        'count': 'sum'
    }).reset_index()
    return holiday_users_df

# Menyiapkan seasonly users
def create_seasonly_users_df(df):
    seasonly_users_df = df.groupby("season").agg({
        "casual": "sum",
        "registered": "sum",
        "count": "sum"
    })
    seasonly_users_df = seasonly_users_df.reset_index()
    seasonly_users_df.rename(columns={
        "count": "total_rides",
        "casual": "casual_rides",
        "registered": "registered_rides"
    }, inplace=True)

    seasonly_users_df = pd.melt(seasonly_users_df,
                                      id_vars=['season'],
                                      value_vars=['casual_rides', 'registered_rides'],
                                      var_name='type_of_rides',
                                      value_name='count_rides')

    seasonly_users_df['season'] = pd.Categorical(seasonly_users_df['season'],
                                             categories=['Spring', 'Summer', 'Fall', 'Winter'])

    seasonly_users_df = seasonly_users_df.sort_values('season')

    return seasonly_users_df

datetime_columns = ["dateday"]
day_dashboard_df.sort_values(by="dateday", inplace=True)
day_dashboard_df.reset_index(inplace=True)

for column in datetime_columns:
  day_dashboard_df[column]=pd.to_datetime(day_dashboard_df[column])

# Membuat komponen filter
min_date = day_dashboard_df["dateday"].min()
max_date = day_dashboard_df["dateday"].max()

with st.sidebar:
    st.image("https://github.com/septharaadhityo/Dicoding-Bike-Sharing/blob/main/images.png")

    # Mengambil start_date & end_date dari date_input
    start_date, end_date = st.date_input(
        label='Rentang Waktu',
        min_value= min_date,
        max_value= max_date,
        value=[min_date, max_date]
    )
main_df = day_dashboard_df[(day_dashboard_df["dateday"] >= str(start_date)) &
                (day_dashboard_df["dateday"] <= str(end_date))]

# meyiapkan dataframe
weekday_users_df = create_weekday_users_df(main_df)
seasonly_users_df = create_seasonly_users_df(main_df)
workingday_users_df = create_workingday_users_df(main_df)
holiday_users_df = create_holiday_users_df(main_df)

# Dashboar lengkap

# Membuat Judul
st.header('Bike Sharing DashboardğŸš²')
col1, col2, col3, = st.columns(3)

with col1:
  total_casual_users = main_df['casual'].sum()
  st.metric("Total Casual Users", value=total_casual_users)
with col2:
  total_registered_users =main_df['registered'].sum()
  st.metric("Total Registered Users", value=total_registered_users)
with col3:
  total_all_users = main_df['count'].sum()
  st.metric("Total All Users", value=total_all_users)

# Membuat Grafik
def create_weekday_users_df(df):
    weekday_users_df = df.groupby("weekday").agg({
        "casual": "sum",
        "registered": "sum",
        "cnt": "sum"
    })
    weekday_users_df = weekday_users_df.reset_index()
    weekday_users_df.rename(columns={
        "cnt": "total_rides",
        "casual": "casual_rides",
        "registered": "registered_rides"
    }, inplace=True)

    weekday_users_df = pd.melt(weekday_users_df,
                                      id_vars=['weekday'],
                                      value_vars=['casual_rides', 'registered_rides'],
                                      var_name='type_of_rides',
                                      value_name='count_rides')

    weekday_users_df['weekday'] = pd.Categorical(weekday_users_df['weekday'],
                                             categories=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])

    weekday_users_df = weekday_users_df.sort_values('weekday')

    return weekday_users_df

def create_seasonly_users_df(df):
    seasonly_users_df = df.groupby("season").agg({
        "casual": "sum",
        "registered": "sum",
        "count": "sum"
    })
    seasonly_users_df = seasonly_users_df.reset_index()
    seasonly_users_df.rename(columns={
        "count": "total_rides",
        "casual": "casual_rides",
        "registered": "registered_rides"
    }, inplace=True)

    seasonly_users_df = pd.melt(seasonly_users_df,
                                      id_vars=['season'],
                                      value_vars=['casual_rides', 'registered_rides'],
                                      var_name='type_of_rides',
                                      value_name='count_rides')

    seasonly_users_df['season'] = pd.Categorical(seasonly_users_df['season'],
                                             categories=['Spring', 'Summer', 'Fall', 'Winter'])

    seasonly_users_df = seasonly_users_df.sort_values('season')

    return seasonly_users_df

st.subheader('Weekday, Workingday, and Holiday Rentals')

fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(15,10))

colors1=["tab:blue", "tab:orange"]
colors2=["tab:blue", "tab:orange"]
colors3=["tab:blue", "tab:orange", "tab:green", "tab:red", "tab:purple", "tab:brown", "tab:pink"]

# Berdasarkan workingday
sns.barplot(
    x='workingday',
    y='count',
    data=workingday_users_df,
    palette=colors1,
    ax=axes[0])

for index, row in enumerate(workingday_users_df['count']):
    axes[0].text(index, row + 1, str(row), ha='center', va='bottom', fontsize=12)

axes[0].set_title('Number of Rents based on Working Day')
axes[0].set_ylabel(None)
axes[0].tick_params(axis='x', labelsize=15)
axes[0].tick_params(axis='y', labelsize=10)

# Berdasarkan holiday
sns.barplot(
  x='holiday',
  y='count',
  data=holiday_users_df,
  palette=colors2,
  ax=axes[1])

for index, row in enumerate(holiday_users_df['count']):
    axes[1].text(index, row + 1, str(row), ha='center', va='bottom', fontsize=12)

axes[1].set_title('Number of Rents based on Holiday')
axes[1].set_ylabel(None)
axes[1].tick_params(axis='x', labelsize=15)
axes[1].tick_params(axis='y', labelsize=10)

plt.tight_layout()
st.pyplot(fig)

st.caption('Copyright (c) Septhara Adhityo R 2023')
